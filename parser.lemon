
%token_prefix XX_
%token_type {xx_parser_token*}
%default_type {json_object*}
%extra_argument {xx_parser_status *status}
%name xx_

%left COMMA .
%left EQUALS .

%include {

#include "json/json.h"

#include "string.h"
#include "parser.h"
#include "scanner.h"
#include "xx.h"

static json_object *xx_ret_literal(int type, xx_parser_token *T)
{
	json_object *ret = json_object_new_object();

	switch (type) {
		case XX_T_IDENTIFIER:
			json_object_object_add(ret, "type", json_object_new_string("variable"));
			break;
		case XX_T_INTEGER:
			json_object_object_add(ret, "type", json_object_new_string("int"));
			break;
		case XX_T_DOUBLE:
			json_object_object_add(ret, "type", json_object_new_string("double"));
			break;
		case XX_T_NULL:
			json_object_object_add(ret, "type", json_object_new_string("null"));
			break;
		case XX_T_STRING:
			json_object_object_add(ret, "type", json_object_new_string("string"));
			break;
		default:
			if (type == XX_T_TRUE) {
				json_object_object_add(ret, "type", json_object_new_string("bool"));
				json_object_object_add(ret, "value", json_object_new_string("true"));
			} else {
				if (type == XX_T_FALSE) {
					json_object_object_add(ret, "type", json_object_new_string("bool"));
					json_object_object_add(ret, "value", json_object_new_string("false"));
				} else {
					fprintf(stderr, "literal??\n");
				}
			}
	}

	if (T) {
		json_object_object_add(ret, "value", json_object_new_string(T->token));
	}

	return ret;
}

static json_object *xx_ret_expr(char *type, json_object *left, json_object *right, json_object *extra)
{
	json_object *ret = json_object_new_object();

	json_object_object_add(ret, "type", json_object_new_string(type));

	if (left) {
		json_object_object_add(ret, "left", left);
	}
	if (right) {
		json_object_object_add(ret, "right", right);
	}
	if (extra) {
		json_object_object_add(ret, "extra", extra);
	}

	return ret;
}

static json_object *xx_ret_namespace(xx_parser_token *T)
{
	json_object *ret = json_object_new_object();

	json_object_object_add(ret, "type", json_object_new_string("namespace"));
	json_object_object_add(ret, "name", json_object_new_string(T->token));

	return ret;
}

static json_object *xx_ret_class(xx_parser_token *T, json_object *class_definition, int is_abstract, xx_parser_token *E)
{
	json_object *ret = json_object_new_object();

	json_object_object_add(ret, "type", json_object_new_string("class"));
	json_object_object_add(ret, "name", json_object_new_string(T->token));
	json_object_object_add(ret, "abtract", json_object_new_int(is_abstract));

	if (E) {
		json_object_object_add(ret, "extends", json_object_new_string(E->token));
	}

	if (class_definition) {
		json_object_object_add(ret, "definition", class_definition);
	}

	return ret;
}

static json_object *xx_ret_class_definition(json_object *properties, json_object *methods, json_object *constants)
{
	json_object *ret = json_object_new_object();

	if (properties) {
		json_object_object_add(ret, "properties", properties);
	}
	if (methods) {
		json_object_object_add(ret, "methods", methods);
	}
	if (constants) {
		json_object_object_add(ret, "constants", constants);
	}

	return ret;
}

static json_object *xx_ret_class_property(int visibility, xx_parser_token *T, json_object *default_value, xx_parser_token *D)
{
	json_object *ret = json_object_new_object();

	if (visibility == XX_T_PUBLIC) {
		json_object_object_add(ret, "visibility", json_object_new_string("public"));
	} else {
		json_object_object_add(ret, "visibility", json_object_new_string("protected"));
	}
	json_object_object_add(ret, "type", json_object_new_string("property"));
	json_object_object_add(ret, "name", json_object_new_string(T->token));

	if (default_value) {
		json_object_object_add(ret, "default", default_value);
	}

	if (D) {
		json_object_object_add(ret, "docblock", json_object_new_string(D->token));
	}

	return ret;
}

static json_object *xx_ret_class_const(xx_parser_token *T, json_object *default_value, xx_parser_token *D)
{
	json_object *ret = json_object_new_object();

	json_object_object_add(ret, "type", json_object_new_string("const"));
	json_object_object_add(ret, "name", json_object_new_string(T->token));
	json_object_object_add(ret, "default", default_value);

	if (D) {
		json_object_object_add(ret, "docblock", json_object_new_string(D->token));
	}

	return ret;
}

static json_object *xx_ret_class_method(int visibility, xx_parser_token *T, json_object *parameters, json_object *statements, xx_parser_token *D)
{
	json_object *ret = json_object_new_object();

	if (visibility == XX_T_PUBLIC) {
		json_object_object_add(ret, "visibility", json_object_new_string("public"));
	} else {
		json_object_object_add(ret, "visibility", json_object_new_string("protected"));
	}
	json_object_object_add(ret, "type", json_object_new_string("method"));
	json_object_object_add(ret, "name", json_object_new_string(T->token));

	if (parameters) {
		json_object_object_add(ret, "parameters", parameters);
	}

	if (statements) {
		json_object_object_add(ret, "statements", statements);
	}

	if (D) {
		json_object_object_add(ret, "docblock", json_object_new_string(D->token));
	}

	return ret;
}

static json_object *xx_ret_parameter(json_object *type, json_object *cast, xx_parser_token *N, json_object *default_value)
{
	json_object *ret = json_object_new_object();

	json_object_object_add(ret, "type", json_object_new_string("parameter"));
	json_object_object_add(ret, "name", json_object_new_string(N->token));

	if (type) {
		json_object_object_add(ret, "data-type", type);
	}
	if (cast) {
		json_object_object_add(ret, "cast", cast);
	}
	if (default_value) {
		json_object_object_add(ret, "default", default_value);
	}

	return ret;
}

static json_object *xx_ret_type(int type)
{
	switch (type) {
		case XX_TYPE_INTEGER:
			return json_object_new_string("int");
		case XX_TYPE_DOUBLE:
			return json_object_new_string("double");
		case XX_TYPE_BOOL:
			return json_object_new_string("bool");
		case XX_TYPE_STRING:
			return json_object_new_string("string");
		case XX_TYPE_ARRAY:
			return json_object_new_string("array");
		case XX_TYPE_VAR:
			return json_object_new_string("variable");
		default:
			fprintf(stderr, "err 1?\n");
	}

}

static json_object *xx_ret_list(json_object *list_left, json_object *right_list)
{
	json_object *ret;
	int i, array_length;

	ret = json_object_new_array();

	if (list_left) {

		if (json_object_get_type(list_left) == json_type_array) {
			array_length = json_object_array_length(list_left);
			for (i = 0; i < array_length; i++){
				json_object_array_add(ret, json_object_array_get_idx(list_left, i));
			}
			//json_object_put(list_left);
		} else {
			json_object_array_add(ret, list_left);
		}

	}

	json_object_array_add(ret, right_list);

	return ret;
}

static json_object *xx_ret_let_statement(xx_parser_token *D, xx_parser_token *T, json_object *expr)
{
	json_object *ret = json_object_new_object();

	json_object_object_add(ret, "type", json_object_new_string("let"));
	if (D) {
		json_object_object_add(ret, "domain", json_object_new_string(D->token));
	}
	json_object_object_add(ret, "variable", json_object_new_string(T->token));
	json_object_object_add(ret, "expr", expr);

	return ret;
}

static json_object *xx_ret_if_statement(json_object *expr, json_object *statements, json_object *else_statements)
{
	json_object *ret = json_object_new_object();

	json_object_object_add(ret, "type", json_object_new_string("if"));
	json_object_object_add(ret, "expr", expr);

	if (statements) {
		json_object_object_add(ret, "statements", statements);
	}

	return ret;
}

static json_object *xx_ret_echo_statement(json_object *expr)
{
	json_object *ret = json_object_new_object();

	json_object_object_add(ret, "type", json_object_new_string("echo"));
	json_object_object_add(ret, "expr", expr);

	return ret;
}

static json_object *xx_ret_declare_statement(int type, json_object *variables)
{
	json_object *ret = json_object_new_object();

	json_object_object_add(ret, "type", json_object_new_string("declare"));

	switch (type) {
		case XX_T_TYPE_INTEGER:
			json_object_object_add(ret, "data-type", json_object_new_string("int"));
			break;
		case XX_T_TYPE_DOUBLE:
			json_object_object_add(ret, "data-type", json_object_new_string("double"));
			break;
		case XX_T_TYPE_BOOL:
			json_object_object_add(ret, "data-type", json_object_new_string("bool"));
			break;
		case XX_T_TYPE_STRING:
			json_object_object_add(ret, "data-type", json_object_new_string("string"));
			break;
		/*case XX_T_TYPE_ARRAY:
			json_object_object_add(ret, "data-type", json_object_new_string("array"));
			break;*/
		case XX_T_TYPE_VAR:
			json_object_object_add(ret, "data-type", json_object_new_string("variable"));
			break;
		default:
			fprintf(stderr, "err 2?\n");
	}

	json_object_object_add(ret, "variables", variables);

	return ret;
}

static json_object *xx_ret_declare_variable(xx_parser_token *T, json_object *expr)
{
	json_object *ret = json_object_new_object();

	json_object_object_add(ret, "variable", json_object_new_string(T->token));
	if (expr) {
		json_object_object_add(ret, "expr", expr);
	}

	return ret;
}

static json_object *xx_ret_comment(xx_parser_token *T)
{
	json_object *ret = json_object_new_object();

	json_object_object_add(ret, "type", json_object_new_string("comment"));
	json_object_object_add(ret, "value", json_object_new_string(T->token));

	return ret;
}

}

%syntax_error {

	//fprintf(stderr, "error!\n");

	if (status->scanner_state->start_length) {
		fprintf(stderr, "Syntax error, %s", status->scanner_state->start);
	} else {
		fprintf(stderr, "EOF");
	}

	//status->syntax_error_len = 48 + Z_STRLEN_P(status->scanner_state->active_file);
	//status->syntax_error = emalloc(sizeof(char) * status->syntax_error_len);

	status->status = XX_PARSING_FAILED;
}

%token_destructor {
	/*if ($$) {
		if ($$->free_flag) {
			efree($$->token);
		}
		efree($$);
	}*/
}

program ::= xx_language(Q) . {
	status->ret = Q;
}

%destructor xx_language { json_object_put($$); }

xx_language(R) ::= xx_top_statement_list(L) . {
	R = L;
}

xx_top_statement_list(R) ::= xx_top_statement_list(L) xx_top_statement(T) . {
	R = xx_ret_list(L, T);
}

xx_top_statement_list(R) ::= xx_top_statement(T) . {
	R = xx_ret_list(NULL, T);
}

xx_top_statement(R) ::= xx_namespace_def(T) . {
	R = T;
}

xx_top_statement(R) ::= xx_class_def(T) . {
	R = T;
}

xx_top_statement(R) ::= xx_comment(T) . {
	R = T;
}

xx_namespace_def(R) ::= NAMESPACE IDENTIFIER(I) DOTCOMMA . {
	R = xx_ret_namespace(I);
}

xx_class_def(R) ::= CLASS IDENTIFIER(I) BRACKET_OPEN xx_class_definition(C) BRACKET_CLOSE . {
	R = xx_ret_class(I, C, 0, NULL);
}

xx_class_def(R) ::= CLASS IDENTIFIER(I) EXTENDS IDENTIFIER(E) BRACKET_OPEN xx_class_definition(C) BRACKET_CLOSE . {
	R = xx_ret_class(I, C, 0, E);
}

xx_class_def(R) ::= ABSTRACT CLASS IDENTIFIER(I) BRACKET_OPEN xx_class_definition(C) BRACKET_CLOSE . {
	R = xx_ret_class(I, C, 1, NULL);
}

xx_class_def(R) ::= ABSTRACT CLASS IDENTIFIER(I) EXTENDS IDENTIFIER(E) BRACKET_OPEN xx_class_definition(C) BRACKET_CLOSE . {
	R = xx_ret_class(I, C, 1, E);
}

xx_class_def(R) ::= CLASS IDENTIFIER(I) BRACKET_OPEN BRACKET_CLOSE . {
	R = xx_ret_class(I, NULL, 0, NULL);
}

xx_class_def(R) ::= CLASS IDENTIFIER(I) EXTENDS IDENTIFIER(E) BRACKET_OPEN BRACKET_CLOSE . {
	R = xx_ret_class(I, NULL, 0, E);
}

xx_class_def(R) ::= ABSTRACT CLASS IDENTIFIER(I) BRACKET_OPEN BRACKET_CLOSE . {
	R = xx_ret_class(I, NULL, 1, NULL);
}

xx_class_def(R) ::= ABSTRACT CLASS IDENTIFIER(I) EXTENDS IDENTIFIER(E) BRACKET_OPEN BRACKET_CLOSE . {
	R = xx_ret_class(I, NULL, 1, E);
}

xx_class_definition(R) ::= xx_class_properties_definition(C) . {
	R = xx_ret_class_definition(C, NULL, NULL);
}

xx_class_definition(R) ::= xx_class_consts_definition(C) . {
	R = xx_ret_class_definition(NULL, NULL, C);
}

xx_class_definition(R) ::= xx_class_methods_definition(M) . {
	R = xx_ret_class_definition(NULL, M, NULL);
}

xx_class_definition(R) ::= xx_class_properties_definition(C) xx_class_methods_definition(M) . {
	R = xx_ret_class_definition(C, M, NULL);
}

xx_class_definition(R) ::= xx_class_properties_definition(C) xx_class_consts_definition(K) . {
	R = xx_ret_class_definition(C, NULL, K);
}

xx_class_definition(R) ::= xx_class_consts_definition(K) xx_class_properties_definition(C) . {
	R = xx_ret_class_definition(C, NULL, K);
}

xx_class_definition(R) ::= xx_class_consts_definition(K) xx_class_methods_definition(M) . {
	R = xx_ret_class_definition(NULL, M, K);
}

xx_class_definition(R) ::= xx_class_properties_definition(C) xx_class_consts_definition(K) xx_class_methods_definition(M) . {
	R = xx_ret_class_definition(C, M, K);
}

xx_class_definition(R) ::= xx_class_consts_definition(K) xx_class_properties_definition(C) xx_class_methods_definition(M) . {
	R = xx_ret_class_definition(C, M, K);
}

xx_class_properties_definition(R) ::= xx_class_properties_definition(L) xx_class_property_definition(P) . {
	R = xx_ret_list(L, P);
}

xx_class_properties_definition(R) ::= xx_class_property_definition(P) . {
	R = xx_ret_list(NULL, P);
}

xx_class_property_definition(R) ::= COMMENT(C) PUBLIC IDENTIFIER(I) DOTCOMMA . {
	R = xx_ret_class_property(XX_T_PUBLIC, I, NULL, C);
}

xx_class_property_definition(R) ::= PUBLIC IDENTIFIER(I) DOTCOMMA . {
	R = xx_ret_class_property(XX_T_PUBLIC, I, NULL, NULL);
}

xx_class_property_definition(R) ::= PUBLIC IDENTIFIER(I) ASSIGN xx_literal_expr(E) DOTCOMMA . {
	R = xx_ret_class_property(XX_T_PUBLIC, I, E, NULL);
}

xx_class_property_definition(R) ::= COMMENT(C) PUBLIC IDENTIFIER(I) ASSIGN xx_literal_expr(E) DOTCOMMA . {
	R = xx_ret_class_property(XX_T_PUBLIC, I, E, C);
}

xx_class_property_definition(R) ::= PROTECTED IDENTIFIER(I) DOTCOMMA . {
	R = xx_ret_class_property(XX_T_PROTECTED, I, NULL, NULL);
}

xx_class_property_definition(R) ::= COMMENT(C) PROTECTED IDENTIFIER(I) DOTCOMMA . {
	R = xx_ret_class_property(XX_T_PROTECTED, I, NULL, C);
}

xx_class_property_definition(R) ::= PROTECTED IDENTIFIER(I) ASSIGN xx_literal_expr(E) DOTCOMMA . {
	R = xx_ret_class_property(XX_T_PROTECTED, I, E, NULL);
}

xx_class_property_definition(R) ::= COMMENT(C) PROTECTED IDENTIFIER(I) ASSIGN xx_literal_expr(E) DOTCOMMA . {
	R = xx_ret_class_property(XX_T_PROTECTED, I, E, C);
}

xx_class_consts_definition(R) ::= xx_class_consts_definition(L) xx_class_const_definition(K) . {
	R = xx_ret_list(L, K);
}

xx_class_consts_definition(R) ::= xx_class_const_definition(K) . {
	R = xx_ret_list(NULL, K);
}

xx_class_methods_definition(R) ::= xx_class_methods_definition(L) xx_class_method_definition(P) . {
	R = xx_ret_list(L, P);
}

xx_class_const_definition(R) ::= COMMENT(C) CONST IDENTIFIER(I) ASSIGN xx_literal_expr(E) DOTCOMMA . {
	R = xx_ret_class_const(I, E, C);
}

xx_class_const_definition(R) ::= CONST IDENTIFIER(I) ASSIGN xx_literal_expr(E) DOTCOMMA . {
	R = xx_ret_class_const(I, E, NULL);
}

xx_class_methods_definition(R) ::= xx_class_method_definition(P) . {
	R = xx_ret_list(NULL, P);
}

xx_class_method_definition(R) ::= PUBLIC FUNCTION IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE BRACKET_OPEN BRACKET_CLOSE . {
	R = xx_ret_class_method(XX_T_PUBLIC, I, NULL, NULL, NULL);
}

xx_class_method_definition(R) ::= PUBLIC FUNCTION IDENTIFIER(I) PARENTHESES_OPEN xx_parameter_list(L) PARENTHESES_CLOSE BRACKET_OPEN BRACKET_CLOSE . {
	R = xx_ret_class_method(XX_T_PUBLIC, I, L, NULL, NULL);
}

xx_class_method_definition(R) ::= COMMENT(C) PUBLIC FUNCTION IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE BRACKET_OPEN BRACKET_CLOSE . {
	R = xx_ret_class_method(XX_T_PUBLIC, I, NULL, NULL, C);
}

xx_class_method_definition(R) ::= COMMENT(C) PUBLIC FUNCTION IDENTIFIER(I) PARENTHESES_OPEN xx_parameter_list(L) PARENTHESES_CLOSE BRACKET_OPEN BRACKET_CLOSE . {
	R = xx_ret_class_method(XX_T_PUBLIC, I, L, NULL, C);
}

xx_class_method_definition(R) ::= PUBLIC FUNCTION IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE BRACKET_OPEN xx_statement_list(S) BRACKET_CLOSE . {
	R = xx_ret_class_method(XX_T_PUBLIC, I, NULL, S, NULL);
}

xx_class_method_definition(R) ::= PUBLIC FUNCTION IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE xx_parameter_list(L) BRACKET_OPEN xx_statement_list(S) BRACKET_CLOSE . {
	R = xx_ret_class_method(XX_T_PUBLIC, I, L, S, NULL);
}

xx_class_method_definition(R) ::= COMMENT(C) PUBLIC FUNCTION IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE BRACKET_OPEN xx_statement_list(S) BRACKET_CLOSE . {
	R = xx_ret_class_method(XX_T_PUBLIC, I, NULL, S, C);
}

xx_class_method_definition(R) ::= COMMENT(C) PUBLIC FUNCTION IDENTIFIER(I) PARENTHESES_OPEN xx_parameter_list(L) PARENTHESES_CLOSE BRACKET_OPEN xx_statement_list(S) BRACKET_CLOSE . {
	R = xx_ret_class_method(XX_T_PUBLIC, I, L, S, C);
}

xx_class_method_definition(R) ::= PROTECTED FUNCTION IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE BRACKET_OPEN BRACKET_CLOSE . {
	R = xx_ret_class_method(XX_T_PROTECTED, I, NULL, NULL, NULL);
}

xx_class_method_definition(R) ::= COMMENT(C) PROTECTED FUNCTION IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE BRACKET_OPEN BRACKET_CLOSE . {
	R = xx_ret_class_method(XX_T_PROTECTED, I, NULL, NULL, C);
}

xx_class_method_definition(R) ::= PROTECTED FUNCTION IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE BRACKET_OPEN xx_statement_list(S) BRACKET_CLOSE . {
	R = xx_ret_class_method(XX_T_PROTECTED, I, NULL, S, NULL);
}

xx_class_method_definition(R) ::= COMMENT(C) PROTECTED FUNCTION IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE BRACKET_OPEN xx_statement_list(S) BRACKET_CLOSE . {
	R = xx_ret_class_method(XX_T_PROTECTED, I, NULL, S, C);
}

xx_parameter_list(R) ::= xx_parameter_list(L) COMMA xx_parameter(P) . {
	R = xx_ret_list(L, P);
}

xx_parameter_list(R) ::= xx_parameter(P) . {
	R = xx_ret_list(NULL, P);
}

xx_parameter(R) ::= IDENTIFIER(I) . {
	R = xx_ret_parameter(NULL, NULL, I, NULL);
}

xx_parameter(R) ::= xx_parameter_type(T) IDENTIFIER(I) . {
	R = xx_ret_parameter(T, NULL, I, NULL);
}

xx_parameter(R) ::= xx_parameter_cast(C) IDENTIFIER(I) . {
	R = xx_ret_parameter(NULL, C, I, NULL);
}

xx_parameter(R) ::= IDENTIFIER(I) ASSIGN xx_literal_expr(E) . {
	R = xx_ret_parameter(NULL, NULL, I, E);
}

xx_parameter(R) ::= xx_parameter_type(T) IDENTIFIER(I) ASSIGN xx_literal_expr(E) . {
	R = xx_ret_parameter(T, NULL, I, E);
}

xx_parameter(R) ::= xx_parameter_cast(C) IDENTIFIER(I) ASSIGN xx_literal_expr(E) . {
	R = xx_ret_parameter(NULL, C, I, E);
}

xx_parameter_cast(R) ::= LESS IDENTIFIER(I) GREATER . {
	R = xx_ret_literal(XX_T_IDENTIFIER, I);
}

xx_parameter_type(R) ::= TYPE_INTEGER . {
	R = xx_ret_type(XX_TYPE_INTEGER);
}

xx_parameter_type(R) ::= TYPE_DOUBLE . {
	R = xx_ret_type(XX_TYPE_DOUBLE);
}

xx_parameter_type(R) ::= TYPE_BOOL . {
	R = xx_ret_type(XX_TYPE_BOOL);
}

xx_parameter_type(R) ::= TYPE_STRING . {
	R = xx_ret_type(XX_TYPE_STRING);
}

xx_parameter_type(R) ::= TYPE_ARRAY . {
	R = xx_ret_type(XX_TYPE_ARRAY);
}

xx_statement_list(R) ::= xx_statement_list(L) xx_statement(S) . {
	R = xx_ret_list(L, S);
}

xx_statement_list(R) ::= xx_statement(S) . {
	R = xx_ret_list(NULL, S);
}

xx_statement(R) ::= xx_let_statement(S) . {
	R = S;
}

xx_statement(R) ::= xx_if_statement(S) . {
	R = S;
}

xx_statement(R) ::= xx_echo_statement(S) . {
	R = S;
}

xx_statement(R) ::= xx_declare_statement(S) . {
	R = S;
}

xx_statement(R) ::= xx_comment(S) . {
	R = S;
}

xx_if_statement(R) ::= IF xx_eval_expr(E) BRACKET_OPEN BRACKET_CLOSE . {
	R = xx_ret_if_statement(E, NULL, NULL);
}

xx_if_statement(R) ::= IF xx_eval_expr(E) BRACKET_OPEN xx_statement_list(L) BRACKET_CLOSE . {
	R = xx_ret_if_statement(E, L, NULL);
}

xx_let_statement(R) ::= LET IDENTIFIER(I) ASSIGN xx_expr(E) DOTCOMMA . {
	R = xx_ret_let_statement(NULL, I, E);
}

xx_let_statement(R) ::= LET IDENTIFIER(D) ARROW IDENTIFIER(I) ASSIGN xx_expr(E) DOTCOMMA . {
	R = xx_ret_let_statement(D, I, E);
}

xx_echo_statement(R) ::= ECHO xx_literal_expr(E) DOTCOMMA . {
	R = xx_ret_echo_statement(E);
}

xx_echo_statement(R) ::= ECHO IDENTIFIER(I) DOTCOMMA . {
	R = xx_ret_echo_statement(xx_ret_literal(XX_T_IDENTIFIER, I));
}

xx_declare_statement(R) ::= TYPE_INTEGER xx_declare_variable_list(L) DOTCOMMA . {
	R = xx_ret_declare_statement(XX_T_TYPE_INTEGER, L);
}

xx_declare_statement(R) ::= TYPE_DOUBLE xx_declare_variable_list(L) DOTCOMMA . {
	R = xx_ret_declare_statement(XX_T_TYPE_DOUBLE, L);
}

xx_declare_statement(R) ::= TYPE_STRING xx_declare_variable_list(L) DOTCOMMA . {
	R = xx_ret_declare_statement(XX_T_TYPE_STRING, L);
}

xx_declare_statement(R) ::= TYPE_BOOL xx_declare_variable_list(L) DOTCOMMA . {
	R = xx_ret_declare_statement(XX_T_TYPE_BOOL, L);
}

xx_declare_statement(R) ::= TYPE_VAR xx_declare_variable_list(L) DOTCOMMA . {
	R = xx_ret_declare_statement(XX_T_TYPE_VAR, L);
}

xx_declare_variable_list(R) ::= xx_declare_variable_list(L) COMMA xx_declare_variable(V) . {
	R = xx_ret_list(L, V);
}

xx_declare_variable_list(R) ::= xx_declare_variable(V) . {
	R = xx_ret_list(NULL, V);
}

xx_declare_variable(R) ::= IDENTIFIER(I) . {
	R = xx_ret_declare_variable(I, NULL);
}

xx_declare_variable(R) ::= IDENTIFIER(I) ASSIGN xx_literal_expr(E) . {
	R = xx_ret_declare_variable(I, E);
}

xx_expr(R) ::= IDENTIFIER(I) . {
	R = xx_ret_literal(XX_T_IDENTIFIER, I);
}

xx_expr(R) ::= INTEGER(I) . {
	R = xx_ret_literal(XX_T_INTEGER, I);
}

xx_expr(R) ::= STRING(S) . {
	R = xx_ret_literal(XX_T_STRING, S);
}

xx_expr(R) ::= DOUBLE(D) . {
	R = xx_ret_literal(XX_T_DOUBLE, D);
}

xx_expr(R) ::= NULL . {
	R = xx_ret_literal(XX_T_NULL, NULL);
}

xx_expr(R) ::= FALSE . {
	R = xx_ret_literal(XX_T_FALSE, NULL);
}

xx_expr(R) ::= TRUE . {
	R = xx_ret_literal(XX_T_TRUE, NULL);
}

xx_literal_expr(R) ::= INTEGER(I) . {
	R = xx_ret_literal(XX_T_INTEGER, I);
}

xx_literal_expr(R) ::= STRING(S) . {
	R = xx_ret_literal(XX_T_STRING, S);
}

xx_literal_expr(R) ::= DOUBLE(D) . {
	R = xx_ret_literal(XX_T_DOUBLE, D);
}

xx_literal_expr(R) ::= NULL . {
	R = xx_ret_literal(XX_T_NULL, NULL);
}

xx_literal_expr(R) ::= FALSE . {
	R = xx_ret_literal(XX_T_FALSE, NULL);
}

xx_literal_expr(R) ::= TRUE . {
	R = xx_ret_literal(XX_T_TRUE, NULL);
}

xx_eval_expr(R) ::= xx_literal_expr(L) . {
	R = L;
}

xx_eval_expr(R) ::= xx_eval_expr(O1) EQUALS xx_eval_expr(O2) . {
	R = xx_ret_expr("equals", O1, O2, NULL);
}

xx_eval_expr(R) ::= PARENTHESES_OPEN xx_eval_expr(L) PARENTHESES_CLOSE . {
	R = L;
}

xx_eval_expr(R) ::= IDENTIFIER(I) . {
	R = xx_ret_literal(XX_T_IDENTIFIER, I);
}

xx_comment(R) ::= COMMENT(C) . {
	R = xx_ret_comment(C);
}
